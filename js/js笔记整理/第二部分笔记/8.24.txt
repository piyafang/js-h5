笔记
========================================
正则：
addClass
  box    
转义
\b	boundary		边界
单词边界 		所有能分隔单词的东西
 *****一个网站中，都会共用一套正则验证。


语言特性：
垃圾回收：
var arr = [1,2,3];
js高级语言

底层语言
c语言
arr = malloc(1024);
..
..
..
free()

内存泄露:严重，常见

生存周期：
1.局部 	很短 	    当函数结束时，局部变量消失
2.全局 	很长 	    当页面关闭时，全局变量消失
3.闭包	可长可短    如果里面的函数还能用，函数中的局部变量就不会消失
		    如果里面的函数还能用，函数中所有的局部变量就不会消失
		    如果里面的函数还能用，整个作用域链上的所有局部变量都不会消失。

function show(){
	var a = 12;
	alert(a);
}

//调用前	没有声明a
show();	//调用中 	声明了
//调用后 	//释放


var a = 12;
function show(){
	alert(a);
}

show();


function show(){
	var a = 12;
	document.onclick=function(){
		alert(a);
	};
}
show();
....
...
...
document.onclick=null;//a才消失

function show(){
	var a = 12;
	var b = 5;
	document.onclick=function(){
		alert(a);
	};
}
show();
//a不消失
//bshow调用之后消失――但是不会消失

原因:
1.稳定――万一
2.速度――

function aaa(){
	var a = 12;
	function bbb(){
		var b = 5;
		function ccc(){
			var c = 5;
			document.onclick=function(){
				alert(c);
			};
		}
	}
}
作用域链:在子级找这个东西，如果没有找父级，找父级的父级，找父级的父级的父级。。。。全局

递归:把大的事分化成小的事

兔子
1.第3个月成年，每一个月生一对儿小兔子
2.兔子不会死
3.兔子可以近亲结婚

1月 	1
2月	1
3月	2（1对大，1对小）
4月	3（1对大，2对小）
5月	5（2对大，3对小）
6月	8（3对大，5对小）

1   1   2   3   5   8   13 21  34
1   2   3   4   5   6   7   8   9  

fn(n)=fn(n-1)+fn(n-2);

1年	144 		1440
2年 	46368 		463680
3年	14930352	149303520
1.5亿/3年
5000千万/1年
4年 	4807526976 	48075269760
480亿/4年

5年 	1548008755920 	15480087559200

递归效率非常高。

5702887
有的东西就不在计算而是存起来


斐波那契数列――数学家


性能优化:
====================================
1.稳定性
2.扩展性
3.性能
0.1s 	0.0000000001s


性能优化:
----------------------------------------------------------------
1.网络性能
	

1.F12,Network		很长时间：需要经验

2.YSlow	查看工具：学习工具
http://yslow.org/mobile/


1.减少http请求
	100=100连接+100请求+100等待+100接收

2.雪碧

3.代码压缩

4.图片懒加载

5.文件合并。

6.CDN




2.执行性能
有用的：
1.不用全局变量
2.尽量不要用属性，要用变量
	属性慢。
	变量	260
	属性	1000
3.循环	for in 		性能非常慢。
4.尽量用系统提供的
5.尽量用正则
6.尽量的减少DOM操作。
	运动-----看不到的地方停掉
7.尽量不要用图片:
	图片不要缩放
	背景图平铺，尽量用大一点的图片
	大小尽量用整数

**8.script尽量放到body的最下面
	css一定要放在上面

没用的：
字符串
正则
var str = 'abc'
+'abc'
+'abc'
+'abc'
+'abc'
+'abc'
+'abc'

var arr = [];
arr.push('abc');
arr.push('abc');
arr.push('abc');
arr.push('abc');
arr.push('abc');
arr.push('abc');
arr.join('');
















