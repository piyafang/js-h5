一、标签
1、视频 video
	属性     	   值       		描述 
	autoplay     autoplay      如果出现该属性，则视频在就绪后马上播放。(可省略) 
	controls     controls      如果出现该属性，则向用户显示控件，比如播放按钮。 
	height       pixels        设置视频播放器的高度。 
	loop         loop          如果出现该属性，则当媒介文件完成播放后再次开始播放。 
	preload      preload       如果出现该属性，则视频在页面加载时进行加载，并预备播放。

	例：
		<video width="320" height="240" controls="controls">
		  <source src="movie.ogg" type="video/ogg">
		  <source src="movie.mp4" type="video/mp4">
		  Your browser does not support the video tag.
		</video>

	<video> 与 </video> 之间插入的内容是供不支持 video 元素的浏览器显示的。

2、音频 audio
		属性         值               描述 
	autoplay      autoplay      如果出现该属性，则音频在就绪后马上播放。 
	controls      controls      如果出现该属性，则向用户显示控件，比如播放按钮。 
	preload       preload   	如果出现该属性，则音频在页面加载时进行加载，并预备播放。
	src  			url 		要播放的音频的 URL。 

	例：
		<audio controls="controls">
		  <source src="song.ogg" type="audio/ogg">
		  <source src="song.mp3" type="audio/mpeg">
			Your browser does not support the audio tag.
		</audio>

3、画布 canvas ——使用 JavaScript 在网页上绘制图像。
	（1)创建canvas元素
		<canvas id="myCanvas" width="200" height="100" style="border:1px solid #c3c3c3;"></canvas>
		默认：高300，宽300
	（2）通过 JavaScript 来绘制
		例1：<script type="text/javascript">
				var c=document.getElementById("myCanvas");
				var cxt=c.getContext("2d");
				cxt.fillStyle="#F00";
				cxt.fillRect(0,0,150,75);
							————-意思是：在画布上绘制 150x75 的矩形，从左上角开始 (0,0)。
			</script>

		例2：线条：<script type="text/javascript">
						var c=document.getElementById("myCanvas");
						var cxt=c.getContext("2d");
						cxt.moveTo(10,10);
						cxt.lineTo(150,50);
						cxt.lineTo(10,50);
						cxt.stroke();
					</script>

		例3：圆形：<script type="text/javascript">
						var c=document.getElementById("myCanvas");
						var cxt=c.getContext("2d");
						cxt.fillStyle="#FF0000";
						cxt.beginPath();
						cxt.arc(70,18,15,0,Math.PI*2,true);
						cxt.closePath();
						cxt.fill();
					</script>

		例4：渐变：<script type="text/javascript">
						var c=document.getElementById("myCanvas");
						var cxt=c.getContext("2d");
						var grd=cxt.createLinearGradient(0,0,175,50);
						grd.addColorStop(0,"#FF0000");
						grd.addColorStop(1,"#00FF00");
						cxt.fillStyle=grd;
						cxt.fillRect(0,0,175,50);
					</script>
		例5：图像：把一幅图像放置到画布上：
					<script type="text/javascript">
						var c=document.getElementById("myCanvas");
						var cxt=c.getContext("2d");
						var img=new Image()
						img.src="flower.png"
						cxt.drawImage(img,0,0);
					</script>
		getContext("2d") 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。

4、 Web 存储
	HTML5 提供了两种在客户端存储数据的新方法：
		localStorage - 没有时间限制的数据存储 
		sessionStorage - 针对一个 session 的数据存储
	在 HTML5 中，数据不是由每个服务器请求传递的，而是只有在请求时使用数据。
它使在不影响网站性能的情况下存储大量数据成为可能。

（1）localStorage 方法：
	特点：存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。

	步骤1：创建和访问 localStorage：
			<script type="text/javascript">
				localStorage.lastname="Smith";
				document.write(localStorage.lastname);
			</script>
	步骤2：对用户访问页面的次数进行计数：
			<script type="text/javascript">
				if (localStorage.pagecount){
				  localStorage.pagecount=Number(localStorage.pagecount) +1;
				}else{
				  localStorage.pagecount=1;
				}
				document.write("Visits "+ localStorage.pagecount + " time(s).");
			</script>

（2）sessionStorage 方法：
	特点：针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。

	步骤1：创建和访问 localStorage：
			<script type="text/javascript">
				sessionStorage.lastname="Smith";
				document.write(sessionStorage.lastname);
			</script>

	步骤2：对用户访问页面的次数进行计数：
			<script type="text/javascript">
				if (sessionStorage.pagecount){
				  sessionStorage.pagecount=Number(sessionStorage.pagecount) +1;
				 }else{
				  sessionStorage.pagecount=1;
				 }
				document.write("Visits "+sessionStorage.pagecount+" time(s) this session.");
			</script>

5、Input 新类型
	（1）email
		例：E-mail: <input type="email" name="user_email" />
		提示：iPhone 中的 Safari 浏览器支持 email 输入类型，并通过改变触摸屏键盘来配合它（添加 @ 和 .com 选项）。
	
	（2）url
		例：Homepage: <input type="url" name="user_url" />
		提示：iPhone 中的 Safari 浏览器支持 url 输入类型，并通过改变触摸屏键盘来配合它（添加 .com 选项）。
	
	（3）number
		属性      值 		 描述 
		max      number    规定允许的最大值 
		min      number    规定允许的最小值 
		step     number    规定合法的数字间隔（如果 step="3"，则合法的数是 -3,0,3,6 等） 
		value 	 number    规定默认值 

		例：Points: <input type="number" name="points" min="1" max="10" />
		提示：iiPhone 中的 Safari 浏览器支持 number 输入类型，并通过改变触摸屏键盘来配合它（显示数字）。
	
	（4）range
		例：<input type="range" name="points" min="1" max="10" />
		range 类型用于应该包含一定范围内数字值的输入域。range 类型显示为滑动条

	（5）Date Pickers（数据检出器）

		HTML5 拥有多个可供选取日期和时间的新输入类型：
			date - 选取日、月、年 
			month - 选取月、年 
			week - 选取周和年 
			time - 选取时间（小时和分钟） 
			datetime - 选取时间、日、月、年（UTC 时间） 
			datetime-local - 选取时间、日、月、年（本地时间） 

		例：Date: <input type="date" name="user_date" />

	（6）search
		search 类型用于搜索域，比如站点搜索或 Google 搜索。（显示为常规的文本域）

6、表单元素（新）
	（1）datalist 元素————多组选择项，类似select
		如需把 datalist 绑定到输入域，请用输入域的 list 属性引用 datalist 的 id：
		例：
			Webpage: <input type="url" list="url_list" name="link" />
			<datalist id="url_list">
				<option label="W3School" value="http://www.W3School.com.cn" />
				<option label="Google" value="http://www.google.com" />
				<option label="Microsoft" value="http://www.microsoft.com" />
			</datalist>
		提示：option 元素永远都要设置 value 属性。

	（2）keygen 元素————单标签
					————提供一种验证用户的可靠方法。（不推荐使用，浏览器支持性不好）
		keygen 元素是密钥对生成器（key-pair generator）。当提交表单时，会生成两个键，一个是私钥，一个公钥。
					私钥（private key）存储于客户端，
					公钥（public key）则被发送到服务器。
					公钥可用于之后验证用户的客户端证书（client certificate）。
		例：
			<form action="demo_form.asp" method="get">
				Username: <input type="text" name="usr_name" />
				Encryption: <keygen name="security" />
				<input type="submit" />
			</form>

	（3）output 元素
			————用于不同类型的输出，比如计算或脚本输出：
		例：
			<script type="text/javascript">
				function resCalc()
				{
				numA=document.getElementById("num_a").value;
				numB=document.getElementById("num_b").value;
				document.getElementById("result").value=Number(numA)+Number(numB);
				}
			</script>
			</head>
			<body>
				<p>使用 output 元素的简易计算器：</p>
				<form onsubmit="return false">
				 <input id="num_a" /> +
				 <input id="num_b" /> =
				 <output id="result" onforminput="resCalc()"></output>
				</form>
			</body>

7、新的表单属性

	新的 form 属性：

		（1）autocomplete 
			————当用户在自动完成域中开始输入时，浏览器应该在该域中显示填写的选项
			例：
			<body>
				<form action="http://www.w3school.com.cn/example/html5/demo_form.asp" method="get" autocomplete="on">
					First name:<input type="text" name="fname" /><br />
					Last name: <input type="text" name="lname" /><br />
					E-mail: <input type="email" name="email" autocomplete="off" /><br />
					<input type="submit" />
				</form>
				<p>请填写并提交此表单，然后重载页面，来查看自动完成功能是如何工作的。</p>
				<p>请注意，表单的自动完成功能是打开的，而 e-mail 域是关闭的。</p>
			</body>

			注释：autocomplete 适用于 <form> 标签，以及以下类型的 <input> 标签：
				text, search, url, telephone, email, password, datepickers, range 以及 color。

		（2）novalidate ————在页面加载时，域自动地获得焦点
			例：
				User name: <input type="text" name="user_name"  autofocus="autofocus" />


	新的 input 属性：

		（1）autocomplete 
		（2）autofocus 
		（3）form ：form 属性必须引用所属表单的 id
					————保证form元素之外的input仍为表单一部分
			例：
				<body>
					<form action="http://www.w3school.com.cn/example/html5/demo_form.asp" method="get" id="user_form">
					First name:<input type="text" name="fname" />
					<input type="submit" />
					</form>
					<p>下面的输入域在 form 元素之外，但仍然是表单的一部分。</p>
					Last name: <input type="text" name="lname" form="user_form" />
				</body>

		（4）表单重写属性 form overrides attributes :
						——————用于创建不同的提交按钮
			表单重写属性有：
				formaction - 重写表单的 action 属性 
				formenctype - 重写表单的 enctype 属性 
				formmethod - 重写表单的 method 属性 
				formnovalidate - 重写表单的 novalidate 属性 （true）
				formtarget - 重写表单的 target 属性 
			注释：表单重写属性适用于以下类型的 <input> 标签：submit 和 image
			例：
				<form action="demo_form.asp" method="get" id="user_form">
					E-mail: <input type="email" name="userid" /><br />
					<input type="submit" value="Submit" />
					<br />
					<input type="submit" formaction="demo_admin.asp" value="Submit as admin" />
					<br />
					<input type="submit" formnovalidate="true" value="Submit without validation" />
					<br />
				</form>

		（5）height 和 width ：
			————只适用于 image 类型的 <input> 标签。

		（6）list：
			list 属性规定输入域的 datalist。datalist 是输入域的选项列表。
			注释：list 属性适用于以下类型的 <input> 标签：
				text, search, url, telephone, email, date pickers, number, range 以及 color。
			例：
				Webpage: <input type="url" list="url_list" name="link" />
					<datalist id="url_list">
					<option label="W3Schools" value="http://www.w3school.com.cn" />
					<option label="Google" value="http://www.google.com" />
					<option label="Microsoft" value="http://www.microsoft.com" />
				</datalist>


		（7）min, max 和 step ：
			例：
				Points: <input type="number" name="points" min="0" max="10" step="3" />
		（8）multiple：
			multiple 属性规定输入域中可选择多个值。
			注释：multiple 属性适用于以下类型的 <input> 标签：email 和 file。
			例：
				Select images: <input type="file" name="img" multiple="multiple" />
		（9）pattern (regexp)：
			pattern 属性规定用于验证 input 域的模式（pattern—— 是正则表达式）。
			例：
				Country code: <input type="text" name="country_code"
					pattern="[A-z]{3}" title="Three letter country code" />



		（10）placeholder ：
			例：
				<input type="search" name="user_search"  placeholder="Search W3School" />
		（11）required ：——规定必须在提交之前填写输入域（不能为空）。
			例：
				Name: <input type="text" name="usr_name" required="required" />




















