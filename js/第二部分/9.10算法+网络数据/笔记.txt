PHP

运动：
1.弹性
2.碰撞

---------------------------------------------------------------------------------------

算法：步骤、经验

算法――不复杂

---------------------------------------------------------------------------------------

算法――《算法导论》

---------------------------------------------------------------------------------------

算法――内功

---------------------------------------------------------------------------------------

算法――步骤

---------------------------------------------------------------------------------------

例子：
12,5,8,3,9,98,17,62,2

5,8,3,9,12,17,62,2,98

5,3,8,9,12,17,2,62,98


总共n个――一共n-1次
4,3,2,1

3,2,1,4
2,1,3,4
1,2,3,4

冒泡排序：
1.两个数一比，如果前一个大，换一下	从头到尾来一遍		一轮
2.一共n-1轮

---------------------------------------------------------------------------------------

查找

中间点

3	7		5
3,4,5,6,7

4	10		7
4,5,6,7,8,9,10

1	5		3
1,2,3,4,5

2	7		4
2,3,4,5,6,7

1	6		3
1,2,3,4,5,6

---------------------------------------------------------------------------------------

arr.length=n

		最优		最差		平均
线性查找		1		n		n/2
二分查找		1		log(n)		log(n)/2

		线性		二分
10		5		2		2.5倍
1000		500		5		100倍
10万		5万		9		5000倍
10亿		5亿		15		3000万倍
10万亿		5万亿		22		2000亿倍

1000000000
1073741824

10000000000000

---------------------------------------------------------------------------------------

没有完美的算法，好坏都没有

---------------------------------------------------------------------------------------

算法――步骤
平均执行次数(时间复杂度)、算法执行所需的内存(空间复杂度)
算法没有好坏――适用范围不同
	** 完全没用的，早就没了 **

---------------------------------------------------------------------------------------

数据结构与算法

---------------------------------------------------------------------------------------

数据结构――如何组织数据

有序数组		二分
无序数组		线性

数据结构>算法
数据结构决定了算法――有什么样的数据结构，就有什么样的算法

---------------------------------------------------------------------------------------

数据结构――增删改查

没有完美的数据结构――

百度
增	1个月
删	1小时
改	1个月
查	0.0000000000000001s

银行
增	1分
删	10年
改	1s
查	5s

---------------------------------------------------------------------------------------

	有序数组			无序数组
增	慢			瞬间
删	一般			一般
改	慢			瞬间
查	瞬间			慢

搜索系统――有序数组
问卷调查――无序数组

---------------------------------------------------------------------------------------

		查	添
有序		快	慢
无序		慢	快

		查		添
有序		0.000000001s	5s
无序		3s		0.000000000001s
二叉树		0.3s		0.2s

---------------------------------------------------------------------------------------

树：

HTML就是树――DOM树

二叉树――每个元素，最多能有两个子节点；左边的都比根小，右边的都比根大

---------------------------------------------------------------------------------------

散列

---------------------------------------------------------------------------------------

算法――步骤
数据结构――

---------------------------------------------------------------------------------------

没有完美的数据结构

---------------------------------------------------------------------------------------

散列――“完美的”数据结构

增	一瞬间
删	一瞬间
改	一瞬间
查	一瞬间

---------------------------------------------------------------------------------------

数组――

一样快
arr[0]++
arr[5432587]++

散列――大数组

---------------------------------------------------------------------------------------

arr[13214585487]={xxxx};	添加
arr[13214585487]=null;		删了
arr[13214585487].cash+=50;	修改
if(arr[13214585487].cash>0)	查

arr[0]
arr[13214585487]

---------------------------------------------------------------------------------------

19999999999
20000000000

5K
100000000000K=97656250M=95367G=93T

93000

---------------------------------------------------------------------------------------

19780605
1749----
    1231

18位
1000000000000000000

5000000000000000000K=4882812500000000M=4768371582031G=4656612873T=4547473P=4440F=4.33E

P=皮
F=飞
E=艾

---------------------------------------------------------------------------------------

1000000000000000000人

1600000000

---------------------------------------------------------------------------------------

映射――%
18%10->8

冲突

---------------------------------------------------------------------------------------

散列――hash(哈希)

---------------------------------------------------------------------------------------

hash――性能取决于空间大小(￥￥￥)
用空间换时间

---------------------------------------------------------------------------------------

堆栈――后进先出，先进后出
队列――后进后出，先进先出

堆栈：浏览器历史记录、ctrl+z、函数
队列：下载队列、客服等待队列、CPU调度队列

---------------------------------------------------------------------------------------

JS的数组是很神奇的，既能当队列用，也能当堆栈用，写：

堆栈：	arr.push/pop		arr.unshift/shift
队列：	arr.push/arr.shift	arr.unshift/pop

---------------------------------------------------------------------------------------

网络协议？

协议：http、https、tcp/ip、ftp、dns、smtp、pop3、snmp

---------------------------------------------------------------------------------------

协议？
规定、标准、约定

---------------------------------------------------------------------------------------

RFC――网络协议

网络协议分层(5/7)

7层协议――OSI7层网络参考模型		理论
5层协议					真正

7层协议：物理层、链路层、网络层、传输层、会话层、表示层、应用层
5层：物理层、链路层、网络层、传输层、应用层

物理层	网线
链路层	内网――路由器&电脑
网络层	外网――寻址
传输层	保持连接
应用层	http、迅雷、游戏

IP地址：210.97.6.8

北京市 朝阳区 建外SOHO 7号7304

210.x.x.x	北京
x.97.x.x	朝阳
x.x.6.x		国贸
x.x.x.8		7号楼

---------------------------------------------------------------------------------------

0.物理层――不研究

1.链路层――内网
MAC地址(物理地址)

2.网络层――外网		IP
IP地址

3.传输层――保持连接	TCP/UDP
	TCP――有状态、可靠传输				速度慢、有延迟
	1.确保顺序		排序、等待
	2.确保全部到达		重传、重复抛弃
	3.确保正确		校验

	UDP――无状态、不可靠传输			速度快、延迟小
	1.不确保顺序
	2.不确保全部到达
	3.不确保正确

	TCP：文件、聊天
	UDP：视频、语音

http、ftp、邮件、迅雷基于tcp
流媒体、QQ基于UDP

4.应用层――不是网络协议(如何处理数据)

http协议
http1.0	不保持连接	低效
http1.1	保持连接		高些

---------------------------------------------------------------------------------------

IP协议――网际协议	外网寻址
TCP协议――可靠传输	顺序、正确、丢失
UDP协议――不靠谱
HTTP协议――网页		定义头的含义、消息结构

---------------------------------------------------------------------------------------

FTP	文件传输协议――传文件
SMTP	简单邮件传输协议――发邮件
POP3			收邮件

---------------------------------------------------------------------------------------

ICMP	网络控制消息协议――控制
1.ping
2.拥塞控制

DNS	域名解析服务――把域名解析成IP

www.baidu.com		202.97.6.35
taobao.com		210.78.12.5
126.com			35.8.7.16

---------------------------------------------------------------------------------------

QQ：你到哪儿了
应用层：你到哪儿了|58794587
传输层：你到哪儿了|58794587|#1|1|354
网络层：你到哪儿了|58794587|#1|1|354|210.97.8.5
链路层：你到哪儿了|58794587|#1|1|354|210.97.8.5|4F-97-86-56-C3
物理层：信号

↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

物理层：信号
链路层：你到哪儿了|58794587|#1|1|354|210.97.8.5|4F-97-86-56-C3
网络层：你到哪儿了|58794587|#1|1|354|210.97.8.5
传输层：你到哪儿了|58794587|#1|1|354
应用层：你到哪儿了|58794587
QQ：你到哪儿了

---------------------------------------------------------------------------------------
