面向对象：
1.类型
instanceof	自己+父级
constructor	自己

2.json
写prototype――不靠谱
命名空间――
用json写对象――一个

3.修改this
call
apply

show.call(给this, 参数1, 参数2, ...)
show.apply(给this, [...])

*** call、apply只能改this ***

---------------------------------------------------------------------------------------

ZQuery：
选择器
以前的东西

---------------------------------------------------------------------------------------

$('div li').click(xxx);

---------------------------------------------------------------------------------------

$('ul li:eq(0)');
$('ul li').eq(0);

$(xxx).eq()	JQ对象
$(xxx).get()	原生对象

---------------------------------------------------------------------------------------

$('div').eq(3);

---------------------------------------------------------------------------------------

$('div').animate(json, 2000, 'linear')

---------------------------------------------------------------------------------------

DOM操作――创建、删除

$('<li>as<span>df</span>asd</li>').appendTo('#ul1 li span.box');
$('xxx').remove();

---------------------------------------------------------------------------------------

循环

var a=12;

a=5;

children	元素
childNodes	元素+文字

---------------------------------------------------------------------------------------

$('li');
$('<li></li>');

#ul1 > li

---------------------------------------------------------------------------------------

$('div').remove();

---------------------------------------------------------------------------------------

循环――

$(xxxx).each(function (index, element){
	this
});

---------------------------------------------------------------------------------------

jQuery

---------------------------------------------------------------------------------------

插件

---------------------------------------------------------------------------------------

自己动手继承：

---------------------------------------------------------------------------------------

继承：父级有的，子级也有
1.重用
特别适合――逻辑复杂

---------------------------------------------------------------------------------------

子级把父级的东西，拿过来

继承：
1.父级的属性
2.父级的方法

---------------------------------------------------------------------------------------

父级有的东西，子级也会有
子级有的东西，父级不一定

子级>=父级

---------------------------------------------------------------------------------------

构造函数+原型

构造函数――加属性
原型――加方法

---------------------------------------------------------------------------------------

继承：
1.父级的属性――call
2.父级的方法――?

			原型赋值		循环原型		new父级
父级变，子级变		√		×		√
方法能过来		√		√		√
子级不能影响父级		×		√		√

---------------------------------------------------------------------------------------

var arr=new Array();

arr.a=12;

Array.prototype.a	×

---------------------------------------------------------------------------------------

constructor

Person.prototype={};
oP.constructor=>Object

---------------------------------------------------------------------------------------

继承属性――call
继承方法――new 父级()

---------------------------------------------------------------------------------------

继承――

---------------------------------------------------------------------------------------

选项卡 -> 自动播放

---------------------------------------------------------------------------------------

function Person()
{
	xxxx
}

Person.proxxxx

new Person();

---------------------------------------------------------------------------------------

继承的时候：可以覆盖父级的方法――先执行一次父级的函数，然后再干子级的事

---------------------------------------------------------------------------------------

后台――了解(介绍)

PHP、Java、.Net

PHP















